---
title: "Week3_Inclass"
---

### Load Necessary R packages

```{r}
pacman::p_load(sf,tidyverse,funModeling)
#tidyverse:data handling, tidy up
#funModeling: package design for us to do EDA
```

### Handling Geospatial Data

#### Import the geo boundaries dataset

```{r}
geoNGA <- st_read("Data/geospatial/",layer="geoBoundaries-NGA-ADM2") %>%
  st_transform(crs=26392)
#read data in use st_read, if it is a shapefile, exclude the extention,look at the prj format, it is WGS 84, so we need to transfer it into Nigeria CRS.
```

```{r}
wp_nga <- read_csv("Data/aspatial/WPdx.csv")%>% filter(`#clean_country_name`=="Nigeria")
```

view the data and see if we can keep the data size small -\> we only need #status_clean

```{r}
view(wp_nga)

```

Converting water point data into sf point features (notice we have a variable of New Geo referenced column, which provides us WKT, well-known text which allows us to store coordinate information in a single ( )

```{r}
wp_nga$Geometry = st_as_sfc(wp_nga$'New Georeferenced Column')
wp_nga
```

As aspatial file don't have crs information, so we need to assign it

When handling aspatial data, first, understand the data type, then assign crs, if the original file is wgs84, then assign 4326 to it

```{r}
wp_sf <- st_sf(wp_nga,crs=4326)
wp_sf
```

Then transform to Nigeria CRS!

```{r}
wp_sf <- wp_sf %>% st_transform(crs=26392)

```

### Import the NGA dataset

```{r}
NGA <- st_read("data/geospatial/",
               layer = "nga_admbnda_adm2_osgof_20190417") %>%
  st_transform(crs = 26392)
```

### Data Cleaning: Excluding redundant fileds

```{r}
NGA <- NGA%>% select(c(3:4,8:9))
#select for column, filter for row
```

Checking for duplicate name

```{r}
NGA$ADM2_EN[duplicated(NGA$ADM22_EN)==TRUE]
```

```{r}
# Get all the duplicated LGA names
duplicated_LGA <- NGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]

# Get all the indices with names that are included in the duplicated LGA names
duplicated_indices <- which(NGA$ADM2_EN %in% duplicated_LGA)

# For every index in the duplicated_indices, concatenate the two columns with a comma
for (ind in duplicated_indices) {
  NGA$ADM2_EN[ind] <- paste(NGA$ADM2_EN[ind], NGA$ADM1_EN[ind], sep=", ")
}
```

```{r}
freq(data=wp_sf,input=
       '#status_clean')
```

replace all the record of NA to 'unknown'

```{r}
wp_sf_nga <- wp_sf %>% rename(status_clean='#status_clean')%>% select (status_clean) %>% mutate(status_clean=replace_na(status_clean,"unknown"))
```

Extract Water Point Data (For Functional, Non-functional, Unknown respectively)

```{r}
wp_functional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Functional","Functional but not in use","Functional but needs repair"))
```

```{r}
wp_nonfunctional<- wp_sf_nga %>% filter(status_clean %in% c("Abandoned/Decommissioned","Aboundoned","Non-Functional due to dry season","Non-Fuctional","Non Functional due to dry season"))
```

```{r}
wp_unknown<- wp_sf_nga %>% filter(status_clean == 'unknown')
```

### Perform a quick EDA

```{r}
freq(data = wp_functional,
     input = 'status_clean')
```

```{r}
freq(data = wp_nonfunctional,
     input = 'status_clean')
```

```{r}
freq(data = wp_unknown,
     input = 'status_clean')
```

Find out the number of total, functional, nonfunctional and unknown water points in each LGA

```{r}
NGA_wp <- NGA %>% 
  mutate(`total_wp` = lengths(
    st_intersects(NGA, wp_sf_nga))) %>%
  mutate(`wp_functional` = lengths(
    st_intersects(NGA, wp_functional))) %>%
  mutate(`wp_nonfunctional` = lengths(
    st_intersects(NGA, wp_nonfunctional))) %>%
  mutate(`wp_unknown` = lengths(
    st_intersects(NGA, wp_unknown)))
```

Visualizing attributes

```{r}
ggplot(data=NGA_wp,aes(x=total_wp))+geom_histogram(bins=20,color="black",fill="light blue") + geom_vline(aes(xintercept=mean(total_wp,na.rm=T)),color="red",linetype="dashed",size=0.8)+ggtitle("Distribution of total water points by LGA")+xlab("No.of water points")+ylab("No.of\nLGAs")+theme(axis.title.y=element_text(angle = 0))
```

Save the sf dataframe into rds format

```{r}
write_rds(NGA_wp,"Data/rds/NGA_wp.rds")
```
