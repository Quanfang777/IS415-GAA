---
title: "TakeHome_Ex1"
author: "Lu Quanfang"
date: "30 January 2023"
date_modified: "r Sys.Date()"
---

# Analysis on the geographic distribution of functional and non-function water points in Osub State, Nigeria

## 1.Background

Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world's accessible freshwater.

Developing countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.

## 2.Objectives

Apply appropriate spatial point patterns analysis method to discover the geographical distribution of functional and non-function water points an and their co-locations

## 3.The Steps at a glance

To achieve the purpose of discovering the geographic distribution of functional and non-functional water points and their co-locations, here is the graph of my working flow so that you can get a quick, overall understanding about the entire process by visualizing it.

### 3.1 Exploratory Spatial Data Analysis (ESDA)

##### 3.1.1 Load necessary R-package and import the geospatial dataset

The package we used for analysis are:

-   **sf**: For importing, managing and processing vector-based geospatial data

-   **tidyverse**: For performing data science tasks such as importing, wrangling and visualising data.

-   **tmap**: used for creating thematic maps, such as choropleth and bubble maps

-   **raster:** reads, writes, manipulates, analyses and models gridded spatial data

-   **spatstat**: used for point pattern analysis

-   **maptools**: a set of tools for manipulating geographic data

-   **funModeling**: used for exploratory data analysis

Let's load the package required!

```{r}
packages = c('sf', 'tidyverse', 'tmap', 'spatstat', 'raster', 'maptools', 'rgdal',
             'kableExtra', 'plotly', 'ggthemes', 'onemapsgapi', 'devtools','funModeling')

# for each package, check if installed and if not, install it
for (p in packages){
  if(!require(p, character.only = T)){
    install.packages(p)
  }
  library(p,character.only = T)
}
```

Here are two possible datasets that we can obtain the geospatial information of Nigeria from, one is from [Humanitarian Data Exchange](https://data.humdata.org/) portal, the other is from [geoBoundaries](https://www.geoboundaries.org/), let's read both of the datasets and examine which one is more suitable to use, **notice that the crs for Nigeria should be 23692, so we need to assign the crs after reading the data**:

```{r}
geoNGA <- st_read("data/geospatial/",
                  layer = "geoBoundaries-NGA-ADM2") %>%
  st_transform(crs = 26392)
```

```{r}
NGA <- st_read("data/geospatial/",
               layer = "nga_admbnda_adm2_osgof_20190417") %>%
  st_transform(crs = 26392)
```

After checking both sf dataframes, we notice that NGA provide both LGA and state information. Hence, NGA data.frame will be selected for the subsequent processing.

##### 3.1.2 Importing Aspatial data

As our target is to analysis the water points in Osun State,Nigeria,(the area colored in red) so let's filter the data and selected only the observations in Osun State, Nigeria

![](graph%20used/location%20of%20Osun%20State.jpg){width="380"}

(Fig1: [Location of Osun State](https://en.wikipedia.org/wiki/Osun_State))

```{r}
wp_Osun <- read_csv("data/aspatial/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria") %>%
  filter (`#clean_adm1` == "Osun") 
```

##### 3.1.3 Mappng the geospatial data sets

```{r}
#Let's display the studyarea - Osun on the map:
NGA_Osun <- NGA%>%
  filter(`ADM1_EN` == "Osun")
```

```{r}
tmap_mode('plot')
tm_shape(NGA_Osun)+tm_polygons()

```

Compared to the map (Fig.1) we know that we have successfully obtained the geospatial information of Osun

##### 3.1.4 **Converting water point data into sf point features**

In order to convert the point data into sf point feature for further analysis, first we need to convert the wkt field into sfc field by using st_as_sfc() data type.

```{r}
wp_Osun$Geometry = st_as_sfc(wp_Osun$`New Georeferenced Column`)
wp_Osun
```

Then, use st_sf() to convert the tibble data.frame into sf object and also include the referencing system of the data into the sf object.

```{r}
wp_Osun <- st_sf(wp_Osun, crs=4326)
wp_Osun
```

After assigning a crs to our sf object of wp_Osun, let's transforming it into Nigeria projected coordinate system

```{r}
wp_Osun <- wp_Osun %>%
  st_transform(crs = 26392)
```

#### 3.1.2 **Geospatial Data Cleaning**

##### 3.1.2.2 Checking for duplicate name

It is always important for us to check for duplicate name in the data main data fields. Here are the steps of properly handling the duplication

```{r}
# Get all the duplicated LGA names
duplicated_LGA <- NGA_Osun$ADM2_EN[duplicated(NGA_Osun$ADM2_EN)==TRUE]

# Get all the indices with names that are included in the duplicated LGA names
duplicated_indices <- which(NGA_Osun$ADM2_EN %in% duplicated_LGA)

# For every index in the duplicated_indices, concatenate the two columns with a comma
for (ind in duplicated_indices) {
  NGA_Osun$ADM2_EN[ind] <- paste(NGA_Osun$ADM2_EN[ind], NGA_Osun$ADM1_EN[ind], sep=", ")
}
```

Let's confirm if there is any duplication

```{r}
NGA_Osun$ADM2_EN[duplicated(NGA_Osun$ADM2_EN)==TRUE]
```

**3.1.2.3 Data Wrangling for Water Point Data**

Let's have a quick understanding of our water point data

```{r}
freq(data = wp_Osun,
     input = '#status_clean')
```

We can see that there are 9 classes in the #status_clean field, and there is a class called NA, for easy handling the subsequent steps and make it a more meaningful analysis, we can recode the NA values into unknow, meanwhile we can also remove the '\#' sign before the #status_clean field by using the code below:

```{r}
wp_Osun <- wp_Osun  %>% 
  rename(status_clean = '#status_clean') %>%
  select(status_clean) %>%
  mutate(status_clean = replace_na(
    status_clean, "unknown"))
```

#### Extracting Water Point Data

Now, let's extract the water point data in Osun state according to their status.

To extract functional water point:

```{r}
wp_Osun_functional <- wp_Osun %>%
  filter(status_clean %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

To extract non-functional water point:

```{r}
wp_Osun_nonfunctional <- wp_Osun %>%
  filter(status_clean %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional due to dry season",
             "Non-Functional",
             "Non functional due to dry season"))
```

To extract water point with unknown status

```{r}
wp_Osun_unknown <- wp_Osun %>%
  filter(status_clean == "unknown")
```

Let's have an understanding for the number of total, functional, nonfunctional and unknown water points in Osun

```{r}
NGA_Osun_wp <- NGA_Osun %>% 
  mutate(`total_wp` = lengths(
    st_intersects(NGA_Osun, wp_Osun))) %>%
  mutate(`wp_functional` = lengths(
    st_intersects(NGA_Osun, wp_Osun_functional))) %>%
  mutate(`wp_nonfunctional` = lengths(
    st_intersects(NGA_Osun, wp_Osun_nonfunctional))) %>%
  mutate(`wp_unknown` = lengths(
    st_intersects(NGA_Osun, wp_Osun_unknown)))
```

```{r}
p1 <- tm_shape(NGA_Osun_wp) +
  tm_fill("wp_Osun_functional",
          n = 5,
          style = "equal",
          palette = "Blues") +
  tm_borders(lwd = 0.1,
             alpha = 1) +
  tm_layout(main.title = "Distribution of functional water point in Osun",
            legend.outside = FALSE)
```

```{r}
p2 <- tm_shape(NGA_Osun_wp) +
  tm_fill("total_wp",
          n = 5,
          style = "equal",
          palette = "Blues") +
  tm_borders(lwd = 0.1,
             alpha = 1) +
  tm_layout(main.title = "Distribution of total  water point in Osun",
            legend.outside = FALSE)
```

```{r}
###tmap_arrange(p2, p1, nrow = 1)
```

#### 3.1.2Display the kernel density maps on openstreetmap of Osub State, Nigeria.

Converting sf data frames to sp's Spatial\* class

```{r}
wp_Osun_functional <- as_Spatial(wp_Osun_functional)
wp_Osun_nonfunctional<- as_Spatial(wp_Osun_nonfunctional)
NGA_Osun_sp <- as_Spatial(NGA_Osun_wp)

```

#### **Converting the Spatial\* class into generic sp format**

```{r}
wp_Osun_functional_sp <- as(wp_Osun_functional, "SpatialPoints")
wp_Osun_nonfunctional_sp <- as(wp_Osun_nonfunctional, "SpatialPoints")
NGA_Osun_sp<- as(NGA_Osun_sp, "SpatialPolygons")
```

#### Converting the generic sp format into spatstat's ppp format

```{r}
wp_Osun_functional_ppp <- as(wp_Osun_functional, "ppp")
wp_Osun_functional_ppp

```

```{r}
wp_Osun_nonfunctional_ppp <- as(wp_Osun_nonfunctional, "ppp")
wp_Osun_nonfunctional_ppp

```

### Handling duplicated points

```{r}
any(duplicated(wp_Osun_functional_ppp))
```

```{r}
any(duplicated(wp_Osun_nonfunctional_ppp))
```

### Creating ***owin*** object

```{r}
Osun_owin <- as(NGA_Osun_sp, "owin")
```

```{r}
plot(Osun_owin)
```

### Combining point events object and owin object

```{r}
wp_Osun_functional_ppp = wp_Osun_functional_ppp[Osun_owin]
wp_Osun_nonfunctional_ppp = wp_Osun_nonfunctional_ppp[Osun_owin]
```

```{r}
kde_Osun_functional_bw<- density(wp_Osun_functional_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
kde_Osun_nonfunctional_bw<- density(wp_Osun_nonfunctional_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
plot(kde_Osun_functional_bw)
```

```{r}
bw <- bw.diggle(wp_Osun_functional_ppp)
bw
```

### Rescalling KDE values

(how to select sigma?)

```{r}
wp_Osun_functional_ppp.km <- rescale(wp_Osun_functional_ppp, 1000, "km")
```

```{r}
wp_Osun_nonfunctional_ppp.km <- rescale(wp_Osun_nonfunctional_ppp, 1000, "km")
```

```{r}
kde_Osun_functional.bw <- density(wp_Osun_functional_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_Osun_functional.bw)
```

\]

```{r}
kde_Osun_nonfunctional.bw <- density(wp_Osun_nonfunctional_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_Osun_nonfunctional.bw)
```

#### 3.1.3 Describe the spatial patterns revealed by the kernel density maps. Highlight the advantage of kernel density map over point map.

```{r}
tmap_mode("view")
tm_shape(NGA_Osun) +
  tm_polygons() +
tm_shape(wp_Osun)+ 
  tm_dots(col = "status_clean",
             size = 0.01,
             border.col = "black",
             border.lwd = 0.5) +
  tm_view(set.zoom.limits = c(8, 16))
```

### 3.2 Second-order Spatial Point Patterns Analysis

#### 3.2.1 Formulate the null hypothesis and alternative hypothesis and select the confidence level.

Testing spatial point patterns using Clark and Evans Test

```{r}
clarkevans.test(wp_Osun_functional_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

```{r}
clarkevans.test(wp_Osun_nonfunctional_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

#### 3.2.2 Perform the test by using appropriate Second order spatial point patterns analysis technique.

```{r}
G_CK = Gest(wp_Osun_functional_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

```{r}
G_CK = Gest(wp_Osun_nonfunctional_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

#### 3.2.3 With reference to the analysis results, draw statistical conclusions.

### 3.3 Spatial Correlation Analysis

#### 3.3.1 Formulate the null hypothesis and alternative hypothesis and select the confidence level.

#### 3.3.2 Perform the test by using appropriate Second order spatial point patterns analysis technique.

#### 3.3.3 With reference to the analysis results, draw statistical conclusions.
