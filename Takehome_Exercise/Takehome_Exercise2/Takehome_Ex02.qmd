---
title: "Takehome_Ex02"
editor: visual
---

# Take-home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district Level, DKI Jakarta

## Background

Since late December 2019, an outbreak of a novel coronavirus disease (COVID-19; previously known as 2019-nCoV) was reported in Wuhan, China, which had subsequently affected 210 countries worldwide. In general, COVID-19 is an acute resolved disease but it can also be deadly, with a 2% case fatality rate.

The COVID-19 vaccination in Indonesia is an ongoing mass immunisation in response to the COVID-19 pandemic in Indonesia. On 13 January 2021, the program commenced when President Joko Widodo was vaccinated at the presidential palace. In terms of total doses given, Indonesia ranks third in Asia and fifth in the world.

According to wikipedia, as of 5 February 2023 at 18:00 WIB (UTC+7), 204,266,655 people had received the first dose of the vaccine and 175,131,893 people had been fully vaccinated; 69,597,474 of them had been inoculated with the booster or the third dose, while 1,585,164 had received the fourth dose. Jakarta has the highest percentage of population fully vaccinated with 103.46%, followed by Bali and Special Region of Yogyakarta with 85.45% and 83.02% respectively.

Despite its compactness, the cumulative vaccination rate are not evenly distributed within DKI Jakarta. The question is where are the sub-districts with relatively higher number of vaccination rate and how they changed over time.

## **Objective**

-   Apply appropriate Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA) to undercover the spatio-temporal trends of COVID-19 vaccination in DKI Jakarta.

-   Reveal the spatio-temporal patterns of COVID-19 cases in the DKI Jakarta province on a sub-district level

-   Examine sub-districts that have a higher value of confirmed cases and deaths relative to other sub-districts

## Data Preparation

### Package Used

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr,readxl,dplyr,lubridate,stringr,sfdep)
```

### Dataset Used

```{r}
datasets <- data.frame(
  Type=c("Geospatial",
         "Aspatial"),
  Name=c("[Batas Desa Provinsi DKI Jakarta](https://www.indonesia-geospasial.com/2020/04/download-shapefile-shp-batas-desa.html)",
         "[Standar Kelurahan Data Corona (Monthly)](https://riwayat-file-covid-19-dki-jakarta-jakartagis.hub.arcgis.com/)"),
  Format=c("Shapefile", 
           ".xlsx"),
  Description=c("Sub-districts in DKI Jakarta",
                "Sub-district level data of daily COVID-19 cases in DKI Jakarta  
                between March 2020~July 2021")
  )

library(knitr)
library(kableExtra)
kable(head(datasets), caption="Datasets Used") %>%
  kable_material("hover", latex_options="scale_down")
```

### Import Geospatial Data

Let's import our geospatial data and only select necessary field, which is first 9 field

```{r}
jakarta <- st_read(dsn="data/geospatial",
                      layer="BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA") %>% select(0:9)
```

From the data we learnt that the CRS is in WGS 84, but we should change it to national [CRS of Indonesia](https://epsg.io/23839), the ESPC code should be 23845

```{r}
jakarta <- st_transform(jakarta, 23845) 
```

Let's double check if CRS has been properly assigned

```{r}
st_crs(jakarta)
```

Yes, it has been correctly assigned

#### Check Invalid Geometries and Missing Values

#### Invalid Geometries

```{r}
length(which(st_is_valid(jakarta) == FALSE))
```

There are no invalid geometries.

#### Missing Values

```{r}
jakarta[rowSums(is.na(jakarta))!=0,]
```

we could observe that the row with id 243,244 are the rows with missing values, so let's remove them

```{r}
jakarta <- na.omit(jakarta,c("DESA_KELUR"))
```

#### Visualize the geographic data

```{r}
basemap <- tm_shape(jakarta) +
  tm_polygons()
basemap
```

```{r}
jakarta <- filter(jakarta, KAB_KOTA != "KEPULAUAN SERIBU")
```

we found that there are some outer island that are not relevant to our analysis, so let's remove them and keep the mainland only

```{r}
basemap <- tm_shape(jakarta) +
  tm_polygons()
basemap
```

```{r}
jakarta <-jakarta %>% 
  dplyr::rename(
    Object_ID=OBJECT_ID,
    Province=PROVINSI, 
    City=KAB_KOTA, 
    District=KECAMATAN, 
    Village_Code=KODE_DESA, 
    Village=DESA, 
    Sub_District=DESA_KELUR,
    Code=KODE, 
    Total_Population=JUMLAH_PEN
    )
```

Import and Clean Aspatial Data

For proper and meaningful data analysis, we always need to examine the necessary column to keep and remove the unnecessary ones to improve the performance as well as computing efficiency

Let's take a look at our original datasets by importing one of our aspatial data

```{r}
Aug2022 <- read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (01 August 2021).xlsx")
```

view the whole excel file to understand the data

```{r}
view(Aug2022)
```

![![](images/paste-145E0758.png){width="185"}](images/paste-6286AE74.png){width="315"}

The necessary columns needed are shown as below: (other than the fields the excel file already contained, we also need a column called Date, which our original excel file not contained but necessary for us to include to analyze the spatio-temporal trends of COVID-19 vaccination in DKI Jakarta.

| Index | Original Name  | Translated Name            |
|-------|----------------|----------------------------|
| 1     | ID             | ID                         |
| 2     | Name_provinsi  | Province                   |
| 3     | name_kota      | City                       |
| 4     | nama_kecamatan | District                   |
| 5     | nama_kelurahan | Sub-District               |
| 6     | Meninggal      | Cumulative Death Cases     |
| 7     | POSITIF        | Cumulative Confirmed Cases |
| 8     | Date           | Date                       |

Now, let's prepare our aspatial data

```{r}
# Set the path to the folder where the Excel files are stored
folder_path <- "C:/Quanfang777/IS415-GAA/Takehome_Exercise/Takehome_Exercise2/data/aspatial"
```

```{r}
#Get a list of all the Excel files in the folder
file_list <- list.files(folder_path, pattern = "*.xlsx", full.names = TRUE) 
```

```{r}
file_list
```

Use lubridate to convert date data : please refer to this [website](https://www.statology.org/lubridate-convert-character-to-date/#:~:text=You%20can%20use%20various%20functions,day%2Dyear%20format%20to%20date)

```{r}

# Create an empty dataframe to store the combined data
vaccination_data <- data.frame()

# Loop through each file in the list, read the data, and append it to the combined data
for (file in file_list) {
  sheet_name <- "Data Kelurahan" # Modify this to match the name of the sheet you want to read
  date <- dmy(str_extract(file, "\\d{2} [[:alpha:]]+ \\d{4}"))
  data <- read_excel(file, sheet ="Data Kelurahan")
  data$date <- date
   vaccination_data <- bind_rows( vaccination_data, data)
}
```

```{r}
 vaccination_data <-  vaccination_data %>%
  select(1:6, "date")
```

```{r}
 view(vaccination_data )
```

```{r}
vaccination_data <- vaccination_data %>% 
  dplyr::rename(
    Family_Code = "KODE KELURAHAN",
    City = "WILAYAH KOTA",
    District=KECAMATAN, 
    Sub_District= KELURAHAN,
    Target=SASARAN, 
    Yet_to_be_Vaccinated="BELUM VAKSIN",
    )
```

Remove the missing value

```{r}
vaccination_data[rowSums(is.na(vaccination_data))!=0,]
```

```{r}
vaccination_data <- na.omit(vaccination_data,c("Family_code"))
```

Join the data

```{r}
colnames(jakarta)
```

```{r}
colnames(vaccination_data)
```

```{r}
combined_jakarta <- left_join(jakarta, vaccination_data,
                              by=c(
                                "Sub_District"="Sub_District")
                              )
```

```{r}
view(combined_jakarta)
```

```{r}

target_cases = tm_shape(combined_jakarta)+
  tm_fill("Target") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Target")

yet_to_be_vac = tm_shape(combined_jakarta)+
  tm_fill("Yet_to_be_Vaccinated") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Yet_to_be_Vaccinated")

tmap_arrange(target_cases, yet_to_be_vac)

```

However, it seems that there are still some missing value.

```{r}
vaccination_subdistrict <- c(vaccination_data$Sub_District)
jakata_subdistrict <- c(jakarta$Sub_District)

unique(vaccination_subdistrict[!(vaccination_subdistrict %in% jakata_subdistrict)])
```

```{r}
unique(jakata_subdistrict[!(jakata_subdistrict %in% vaccination_subdistrict)])
```

```{r}
jakarta$Sub_District[jakarta$Sub_District == 'KRENDANG'] <- 'KERENDANG'
jakarta$Sub_District[jakarta$Sub_District == 'RAWA JATI'] <- 'RAWAJATI'
jakarta$Sub_District[jakarta$Sub_District == 'KAMPUNG TENGAH'] <- 'TENGAH'
jakarta$Sub_District[jakarta$Sub_District == 'BALE KAMBANG'] <- 'BALEKAMBANG'
jakarta$Sub_District[jakarta$Sub_District == 'PINANG RANTI'] <- 'PINANGRANTI'
jakarta$Sub_District[jakarta$Sub_District == 'JATI PULO'] <- 'JATIPULO'
jakarta$Sub_District[jakarta$Sub_District == 'PAL MERIAM'] <- 'PALMERIAM'
jakarta$Sub_District[jakarta$Sub_District == 'KRAMAT JATI'] <- 'KRAMATJATI'
jakarta$Sub_District[jakarta$Sub_District == 'HALIM PERDANA KUSUMAH'] <- 'HALIM PERDANA KUSUMA'
jakarta$Sub_District[jakarta$Sub_District == 'KALI BARU'] <- 'KALIBARU'
```

```{r}
jakarta$Sub_District[jakarta$Sub_District == 'BALEKAMBANG'] <- 'BALE KAMBANG'
jakarta$Sub_District[jakarta$Sub_District == 'HALIM PERDANA KUSUMA'] <- 'HALIM PERDANA KUSUMAH'
jakarta$Sub_District[jakarta$Sub_District == 'JATIPULO'] <- 'JATI PULO'
jakarta$Sub_District[jakarta$Sub_District == 'TENGAH'] <- 'KAMPUNG TENGAH'
jakarta$Sub_District[jakarta$Sub_District == 'KRAMATJATI'] <- 'KRAMAT JATI'
jakarta$Sub_District[jakarta$Sub_District == 'KRENDANG'] <- 'KERENDANG'
jakarta$Sub_District[jakarta$Sub_District == 'PALMERIAM'] <- 'PAL MERIAM'
jakarta$Sub_District[jakarta$Sub_District == 'PINANGRANTI'] <- 'PINANG RANTI'
jakarta$Sub_District[jakarta$Sub_District == 'RAWAJATI'] <- 'RAWA JATI'
```

```{r}
combined_jakarta <- left_join(jakarta, vaccination_data,
                              by=c(
                                "Sub_District"="Sub_District")
                              )
```

```{r}
target_cases = tm_shape(combined_jakarta)+
  tm_fill("Target") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Target")

yet_to_be_vac = tm_shape(combined_jakarta)+
  tm_fill("Yet_to_be_Vaccinated") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Yet_to_be_Vaccinated")

tmap_arrange(target_cases, yet_to_be_vac)
```

**Calculate Monthly Vaccination Rate**

```{r}
combined_jakarta$Monthly_Vacinnation_Rate <- (combined_jakarta$Target - combined_jakarta$Yet_to_be_Vaccinated) / combined_jakarta$Target
```

```{r}
vaccination_data$date <- as.character(vaccination_data$date)
```

```{r}
cases_rate <- vaccination_data %>%
  inner_join(jakarta, by=c("Sub_District" = "Sub_District")) %>%
  group_by(Sub_District, date) %>%
  dplyr::summarise(`Monthly_Vac_R` = ((Target-Yet_to_be_Vaccinated)/Target)) %>%
  ungroup() %>% pivot_wider(names_from = date,
              values_from = Monthly_Vac_R)
```

**Monthly Vaccination Rate Mapping**

```{r}
combined_jakarta <- st_as_sf(combined_jakarta)

# need to join our previous dataframes with the geospatial data to ensure that geometry column is present
cases_rate <- cases_rate%>% left_join(jakarta, by=c("Sub_District"="Sub_District"))
cases_rate <- st_as_sf(cases_rate)

```

```{r}
jenks_plot <- function(df, varname) {
  tm_shape(jakarta) +
    tm_polygons() +
  tm_shape(df) +
    tm_fill(varname, 
          n= 6,
          style = "jenks", 
          title = "Case Rate") +
    tm_layout(main.title = varname,
          main.title.position = "center",
          main.title.size = 1.2,
          legend.height = 0.45, 
          legend.width = 0.35,
          frame = TRUE) +
    tm_borders(alpha = 0.5)
}
```

```{r}
glimpse(cases_rate)
```

```{r}
tmap_mode("plot")
tmap_arrange(jenks_plot(cases_rate, "2021-07-01"),
             jenks_plot(cases_rate, "2021-08-01"),
             jenks_plot(cases_rate, "2021-09-01"),
             jenks_plot(cases_rate, "2021-10-01"),
             jenks_plot(cases_rate, "2021-11-01"),
             jenks_plot(cases_rate, "2021-12-01"))
```

```{r}
tmap_mode("plot")
tmap_arrange(jenks_plot(cases_rate, "2022-01-01"),
             jenks_plot(cases_rate, "2022-02-01"),
             jenks_plot(cases_rate, "2022-03-02"),
             jenks_plot(cases_rate, "2022-04-01"),
             jenks_plot(cases_rate, "2022-05-01"),
             jenks_plot(cases_rate, "2022-06-01"))
```

Preparing LISA map classes

Local Gi\* Analysis

Local Spatial Autocorrelation Statistics:

A collection of geospatial statistical analysis methods for analysing the location related tendency (clusters or outliers) in the attributes of geographically referenced data (points or areas).

Can be indecies decomposited from their global measures such as local Moran's I, local Geary's c, and Getis-Ord Gi\*.

These spatial statistics are well suited for:

detecting clusters or outliers;

identifying hot spot or cold spot areas;

assessing the assumptions of stationarity; and

identifying distances beyond which no discernible association obtains.

```{r}
wm_idw <- combined_jakarta %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

```{r}
HCSA <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    Monthly_Vacinnation_Rate, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)
HCSA
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("p_sim") + 
  tm_borders(alpha = 0.5)
```

```{r}
tmap_mode("plot")
map1 <- tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Monthly Vacinnation Rate",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
jakarta_cube <- combined_jakarta %>% select ("Sub_District","date","Monthly_Vacinnation_Rate")
```

```{r}
jakarta_st <- spacetime(jakarta_cube , jakarta,
                      .loc_col = "Sub_District",
                      .time_col = "date")
```

```{r}
is_spacetime_cube(jakarta_st)
```

```{r}
jakarta_nb <- jakarta_st %>% activate("geometry") %>% mutate (nb=include_self(st_contiguity(geometry)),wt=st_weights(nb))%>% set_wts("wt")%>%set_nbs("nb")
```

```{r}
glimpse(jakarta_nb)

```

Mann-Kendall Test

```{r}
gi_stars <- jakarta_nb %>% 
  group_by(date) %>% 
  mutate(gi_star = local_gstar_perm(
    Monthly_Vacinnation_Rate, nb, wt)) %>% 
  tidyr::unnest(gi_star)
```

```{r}
ehsa <- gi_stars %>%
  group_by(Sub_District) %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>%
  tidyr::unnest_wider(mk)
```

```{r}
ehsa <- emerging_hotspot_analysis(
  x = jakarta_st, 
  .var = "Monthly_Vacinnation_Rate", 
  k = 1, 
  nsim = 99
)
```
